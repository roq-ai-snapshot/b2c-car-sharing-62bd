generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @db.Uuid
  car_id           String   @db.Uuid
  start_time       DateTime @db.Timestamp(6)
  end_time         DateTime @db.Timestamp(6)
  booking_status   String?  @db.VarChar(255)
  pickup_location  String?  @db.VarChar(255)
  dropoff_location String?  @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  car              car      @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model car {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make          String       @db.VarChar(255)
  model         String       @db.VarChar(255)
  year          Int
  color         String?      @db.VarChar(255)
  license_plate String?      @db.VarChar(255)
  company_id    String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  booking       booking[]
  company       company      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  car_status    car_status[]
}

model car_status {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  car_id           String    @db.Uuid
  status           String?   @db.VarChar(255)
  last_updated     DateTime? @db.Timestamp(6)
  next_maintenance DateTime? @db.Timestamp(6)
  mileage          Int?
  location         String?   @db.VarChar(255)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  car              car       @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description          String?                @db.VarChar(255)
  address              String?                @db.VarChar(255)
  city                 String?                @db.VarChar(255)
  state                String?                @db.VarChar(255)
  zip_code             String?                @db.VarChar(10)
  name                 String                 @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  user_id              String                 @db.Uuid
  tenant_id            String                 @db.VarChar(255)
  car                  car[]
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  operations_dashboard operations_dashboard[]
}

model operations_dashboard {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id       String    @db.Uuid
  total_cars       Int?
  available_cars   Int?
  booked_cars      Int?
  maintenance_cars Int?
  last_updated     DateTime? @db.Timestamp(6)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  company          company   @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  booking     booking[]
  company     company[]
}
